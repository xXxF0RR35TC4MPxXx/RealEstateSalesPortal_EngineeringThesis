@page "/Agency/{id}"
@using Inżynierka.Client.Handlers;
@using Inżynierka.Client.Logics;
@using Inżynierka.Client.Pages.Offer.Search
@using Inżynierka.Shared.DTOs.Offers.Read;
@using Inżynierka.Shared.ViewModels.Offer.Filtering;
@using Inżynierka_Common.Enums;
@using Inżynierka_Common.Listing;
@using Inżynierka_Services.Listing;
@inject IApiLogic _apiLogic
@inject NavigationManager NavManager
<BlazorStyled.Styled>
    .user-title-bar
    {
        font-size: 24px;
        font-family: "Open Sans", sans-serif;
        font-weight: bold;
    }
</BlazorStyled.Styled>

<SpinLoader IsLoading="isLoading">
    <LoadingTemplate>
        <LoadingScreen Text="Trwa otwieranie strony agencji..."/>
    </LoadingTemplate>
    <ContentTemplate>
        @if(agency!=null)
        {
            <PageTitle>@agency.AgencyName - BuyDom.pl</PageTitle>
            <div class="mat-layout-grid">
                <div class="mat-layout-grid-inner">
                    <AuthorizeView>
                        <Authorized>
                            @{SetUserId(context.User.Claims.FirstOrDefault(x => x.Type == "UserId")?.Value);}
                            <AgencyPageInfo viewerId=@userId agencyId="@id" />
                        </Authorized>
                        <NotAuthorized>
                            <AgencyPageInfo agencyId="@id"/>
                        </NotAuthorized>
                    </AuthorizeView>
                    
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2" />
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                        @if(agency.TotalCount == 0)
                        {
                            <p class="user-title-bar">Agencja nie posiada aktualnie aktywnych ofert</p>    

                        }
                        else
                        {
                            <p class="user-title-bar">Agencja posiada @agency.TotalCount @PolishConjugationHelper.ActiveOffers(agency.TotalCount)</p>
                        }
                        
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2" />

                    @{
                        if (agency.AgencyOfferDTOs != null)
                        {
                            @foreach (AgencyOffersListThumbnailDTO offer in agency.AgencyOfferDTOs)
                            {
                                string? imgSrc = null;
                                string? logoSrc = null;
                                if (offer.Photo != null)
                                {
                                    imgSrc = String.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(offer.Photo));
                                }
                                if (offer.AgencyLogo != null)
                                {
                                    logoSrc = String.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(offer.AgencyLogo));
                                }
                                <AuthorizeView>
                                    <Authorized>
                                        <SingleOfferInSearch MyId=@Int32.Parse(userId) Photo=@imgSrc AgencyLogo=@logoSrc EstateType=@offer.EstateType
                                             OfferType=@offer.OfferType SellerType=null AgencyName=@offer.AgencyName
                                             AgencyId=@offer.AgencyId Area=@offer.Area RoomCount=@offer.RoomCount Id=@offer.Id
                                             OfferTitle=@offer.OfferTitle City=@offer.City Price=offer.Price
                                             PricePerMeter=@offer.PriceForOneSquareMeter Voivodeship=@offer.Voivodeship />
                                    </Authorized>
                                    <NotAuthorized>
                                        <SingleOfferInSearch MyId=null Photo=@imgSrc AgencyLogo=@logoSrc EstateType=@offer.EstateType
                                             OfferType=@offer.OfferType SellerType=null AgencyName=@offer.AgencyName
                                             AgencyId=@offer.AgencyId Area=@offer.Area RoomCount=@offer.RoomCount Id=@offer.Id
                                             OfferTitle=@offer.OfferTitle City=@offer.City Price=offer.Price
                                             PricePerMeter=@offer.PriceForOneSquareMeter Voivodeship=@offer.Voivodeship />
                                    </NotAuthorized>
                                </AuthorizeView>
                            }

                            <!-- paginator -->
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4" />
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                                @if (Page.HasValue && totalPageCount > 0)
                                {
                                    <div style="margin-left: 37.5%;">
                                        <button class="btn-lg btn" id="prev" @onclick="PrevPage">
                                            <i class="fa-solid fa-chevron-left"></i>
                                        </button>


                                        @for (int i = Page.Value - 2; i <= Page + 2; i++)
                                        {
                                            int j = i;
                                            @if (i > 0 && i <= totalPageCount)
                                            {
                                                if (i == Page)
                                                {
                                                    <span class="px-2" style="font-weight:bold;cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                                                }
                                                else
                                                {
                                                    <span class="px-2" style="cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                                                }
                                            }
                                        }

                                        <button class="btn-lg btn" id="next" @onclick="NextPage">
                                            <i class="fa-solid fa-chevron-right"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4" />

                        }
                    }
                    
                </div>
            </div>
        }
    </ContentTemplate>
</SpinLoader>
@if (agencyNotFound)
{
    <NotFound Text="Wybrana agencja nie istnieje lub została usunięta." />
}
@code {
    #region Pagination
    private int pageSize = 10;
    private int totalPageCount;

    protected async Task NextPage()
    {
        if (Page < totalPageCount)
        {
            Page++;
            await ShowPage();
        }
    }
    protected async Task ShowPage(int i)
    {
        Page = i;
        await ShowPage();
    }

    protected async Task PrevPage()
    {
        if (Page > 1)
        {
            Page--;
            await ShowPage();
        }
    }

    #endregion


    [Parameter]
    public string id { get; set; }
    public string? userId { get; set; }
    public bool isLoading = true;

    public AgencyOfferListing? agency = new();
    public static int? Page = 1;
    public static Inżynierka_Common.Listing.SortOrder sortOrder = new();

    public AgencyPageFilteringViewModel? model;

    public async void SetUserId(string? id)
    {
        userId = id;
    }
    public bool agencyNotFound = false;
    protected async Task ShowPage()
    {
        if (Page == null)
        {
            Page = 1;
        }
        Paging paging = new()
            {
                PageSize = pageSize,
                PageNumber = Page != null ? Page.Value : 1
            };
        sortOrder.Sort = new();
        KeyValuePair<string, string> sort = new("AddedDate", "DESC");
        sortOrder.Sort.Add(sort);

        model = new()
            {
                availableOfferTypes = AvailableOfferTypes.SALE_AND_RENT,
                availableEstateType = AvailableEstateType.ALL,
                Paging = paging,
                SortOrder = sortOrder
            };

        agency = await _apiLogic.GetAgencyProfile(model, Int32.Parse(id));
        
        if (agency == null)
        {
            agencyNotFound = true;
            totalPageCount = 1;
        }
        else
        {
            totalPageCount = (agency.TotalCount + pageSize - 1) / pageSize;
        }

        isLoading = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await ShowPage();
        await base.OnInitializedAsync();
    }
}
