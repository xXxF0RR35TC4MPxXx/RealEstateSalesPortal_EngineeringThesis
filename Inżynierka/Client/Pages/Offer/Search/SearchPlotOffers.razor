@page "/Offer/Search/Plot"
<PageTitle>Oferty działek - BuyDom.pl</PageTitle>
@using Inżynierka.Shared.DTOs.Offers.Read
@using Inżynierka.Client.Handlers
@using Inżynierka.Shared.ViewModels.Offer.Filtering
@using Inżynierka_Common.Enums
@using Inżynierka_Common.Helpers
@using Inżynierka_Common.Listing
@using Inżynierka_Services.Listing
@using System.Text.Json
@using System.Text
@using System.ComponentModel.DataAnnotations
@using Majorsoft.Blazor.Components.Common.JsInterop.Scroll
@inject IScrollHandler scroll
@inject HttpClient _httpClient
@inject IJSRuntime JsRuntime
@inject NavigationManager _navigationManager

<BlazorStyled.Styled>
    .form-check-input:checked 
    {
        background-color: #008000 !important;
        border-color: #008000 !important;
    }

    .title-bar
    {
        font-size: 24px;
        font-family: "Open Sans", sans-serif;
        font-weight: bold;
        padding-left: 58px;
    }

    .hx-multi-select-input:hover 
    {
        cursor: pointer !important;
    }

    .form-select
    {
        height:50px;
        border:none !important; 
        border-radius: 0px !important;
        border-bottom: 1px solid darkgray !important;
    }

    .dropdown-item:active
    {
        background-color: #008000 !important;
    }

    .dropdown:hover
    {
        background-color:#ECECEC;
    }

    .dropdown
    {
        border-radius: 4px 4px 0 0 !important;
        background-color: #F5F5F5;
    }

    .mdc-select .mdc-select__anchor {
        height: 50px !important;
        display: flex;
        align-items: baseline;
    }
    .mdc-select .mdc-select__dropdown-icon 
    {
        width: 18px !important;
    }
    .mdc-select .mdc-select__anchor::before {
        height: 38px !important;
    }
    .mdc-text-field--filled {
        height: 50px !important;
    }

    .form-select:focus 
    {
        border-bottom: 1px solid darkgray !important;
        outline: 0 !important;
        box-shadow: none !important;
    }

    .group-name
    {
        font-weight: bold;
        padding-top: 7px;
        font-size: 18px;
    }
</BlazorStyled.Styled>

<EditForm EditContext="@editContext" OnValidSubmit="Success">
    <MatThemeProvider Theme="@OfferSearchHelper.theme">
        <DataAnnotationsValidator />
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <SearchFormTitle Text="Kryteria wyszukiwania ofert działek"/>
  
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2" />
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                    <p>
                        <MatTextField Style="width:100%;" Label="Miasto" @bind-Value="City" />
                        <ValidationMessage For="@(() => City)" />
                    </p>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                    <p>
                        <MatNumericUpDownField Label="Cena min. (zł)"
                                            @bind-Value=@MinPrice
                                            Style="width:100%;"
                                            DecimalPlaces=0>
                        </MatNumericUpDownField>
                        <ValidationMessage For="@(() => MinPrice)" />
                    </p>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                    <p>
                        <MatNumericUpDownField Label="Cena max. (zł)"
                                            @bind-Value=@MaxPrice
                                            Style="width:100%;"
                                            DecimalPlaces=0>
                        </MatNumericUpDownField>
                        <ValidationMessage For="@(() => MaxPrice)" />
                    </p>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                    <MatButton style="width: 100%;height: 77.5%;" @onclick="Search" Unelevated="true" Icon="search">Szukaj</MatButton>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2" />

                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2" />
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                    <p>
                        <MatTextField Style="width:100%;" Label="Fragment opisu" @bind-Value="DescriptionFragment" />
                        <ValidationMessage For="@(() => DescriptionFragment)" />
                    </p>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                    <MatSelectValue Style="width:100%;" Label="Nowość oferty" @bind-Value="@HowRecentEnum" Items="@howRecentList" ValueSelector="@(i=>i)">
                        <ItemTemplate Context="thisContext">
                            <span>@EnumHelper.GetDescriptionFromEnum(thisContext)</span>
                        </ItemTemplate>
                    </MatSelectValue>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <p>
                        <MatNumericUpDownField Label="ID oferty"
                                            @bind-Value=@OfferId
                                            Style="width:100%;"
                                            DecimalPlaces=0>
                        </MatNumericUpDownField>
                        <ValidationMessage For="@(() => OfferId)" />
                    </p>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <MatButton style="width: 100%;height: 77.5%;" @onclick="ShowMore" Outlined="true" Icon="@moreButtonIcon">@moreButtonText</MatButton>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2" />
            </div>
        </div>
        <div class="mat-layout-grid" style="padding-top: 0px; display: @showExtraFilters">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2" />
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                    <p>
                        <MatNumericUpDownField Label="Powierzchnia min."
                                            @bind-Value=@minArea
                                            Style="width:100%;"
                                            DecimalPlaces=0>
                        </MatNumericUpDownField>
                        <ValidationMessage For="@(() => minArea)" />
                    </p>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                    <p>
                        <MatNumericUpDownField Label="Powierzchnia max."
                                            @bind-Value=@maxArea
                                            Style="width:100%;"
                                            DecimalPlaces=0>
                        </MatNumericUpDownField>
                        <ValidationMessage For="@(() => maxArea)" />
                    </p>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                    <p>
                        <MatNumericUpDownField Label="Min. cena za m²"
                                            @bind-Value=@minPricePerMeterSquared
                                            Style="width:100%;"
                                            DecimalPlaces=0>
                        </MatNumericUpDownField>
                        <ValidationMessage For="@(() => minPricePerMeterSquared)" />
                    </p>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                    <p>
                        <MatNumericUpDownField Label="Max. cena za m²"
                                            @bind-Value=@maxPricePerMeterSquared
                                            Style="width:100%;"
                                            DecimalPlaces=0>
                        </MatNumericUpDownField>
                        <ValidationMessage For="@(() => maxPricePerMeterSquared)" />
                    </p>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2" />


                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2" />
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                    <HxMultiSelect 
                        TItem="PlotType"
                        TValue="PlotType"
                        Data="@allPlotTypes"
                        SortKeySelector=@(p=>p)
                        @bind-Value="@acceptablePlotTypeList"
                        TextSelector="@(p => EnumHelper.GetDescriptionFromEnum(p))"
                        EmptyText="Typ działki"
                        NullDataText="Ładowanie działek..." />
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                    <MatSelectValue Style="width:100%;" Label="Rodzaj oferty" @bind-Value="@AvailableOfferTypesEnum" Items="@AvailableOfferTypesList" ValueSelector="@(i=>i)">
                        <ItemTemplate Context="thisContext">
                            <span>@EnumHelper.GetDescriptionFromEnum(thisContext)</span>
                        </ItemTemplate>
                    </MatSelectValue>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                    <MatCheckbox Style="width:100%;" @bind-Value="@RemoteControl" Indeterminate="true">Zdalna obsługa</MatCheckbox>
                    <MatButton Type="button" OnClick="@(_ =>
			                {
				                RemoteControl = null;
			                })">Wyczyść</MatButton>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4" />

                <SearchFormSplitter/>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2" />
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <p class="group-name">Okolica:</p>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <MatCheckbox Style="width:100%;" @bind-Value="@NearForest">Las</MatCheckbox>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <MatCheckbox Style="width:100%;" @bind-Value="@NearLake">Jezioro</MatCheckbox>

                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <MatCheckbox Style="width:100%;" @bind-Value="@NearMountains">Góry</MatCheckbox>

                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <MatCheckbox Style="width:100%;" @bind-Value="@NearSea">Morze</MatCheckbox>

                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <MatCheckbox Style="width:100%;" @bind-Value="@NearOpenArea">Otwarta przestrzeń</MatCheckbox>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4" />
            </div>
        </div>
    </MatThemeProvider>
</EditForm>
    <SpinLoader IsLoading="isLoading">
        <LoadingTemplate>
            <div>
                <br /><br />
                <CircleFade Center="true" size="70px"></CircleFade>
            </div>
        </LoadingTemplate>
        <ContentTemplate>
            @if (offers != null && offers.OfferDTOs != null)
            {
                <div class="mat-layout-grid">
                    <div class="mat-layout-grid-inner">
                        <SearchFormFromOffersSeparator Count=@offers.TotalCount Text="działek"/>
                        @foreach (OfferListThumbnailDTO offer in offers.OfferDTOs)
                        {
                            string? imgSrc = null;
                            string? logoSrc = null;
                            if (offer.Photo != null)
                            {
                                imgSrc = String.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(offer.Photo));
                            }
                            if (offer.AgencyLogo != null)
                            {
                                logoSrc = String.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(offer.AgencyLogo));
                            }
                            <AuthorizeView>
                                <Authorized>
                                    <SingleOfferInSearch MyId=@Int32.Parse(context.User.Claims.FirstOrDefault(x => x.Type == "UserId")?.Value) Photo=@imgSrc AgencyLogo=@logoSrc EstateType=@offer.EstateType
                                    OfferType=@offer.OfferType SellerType=@offer.SellerType AgencyName=@offer.AgencyName
                                    AgencyId=@offer.AgencyId Area=@offer.Area RoomCount=@offer.RoomCount Id=@offer.Id
                                    OfferTitle=@offer.OfferTitle City=@offer.City Price=offer.Price
                                    PricePerMeter=@offer.PriceForOneSquareMeter Voivodeship=@offer.Voivodeship />
                                </Authorized>
                                <NotAuthorized>
                                <SingleOfferInSearch MyId=null Photo=@imgSrc AgencyLogo=@logoSrc EstateType=@offer.EstateType
                                             OfferType=@offer.OfferType SellerType=@offer.SellerType AgencyName=@offer.AgencyName
                                             AgencyId=@offer.AgencyId Area=@offer.Area RoomCount=@offer.RoomCount Id=@offer.Id
                                             OfferTitle=@offer.OfferTitle City=@offer.City Price=offer.Price
                                             PricePerMeter=@offer.PriceForOneSquareMeter Voivodeship=@offer.Voivodeship />
                                </NotAuthorized>
                            </AuthorizeView>
                        }

                        <!-- paginator -->
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4" />
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                            @if (Page.HasValue && totalPageCount > 0)
                            {
                                <div style="margin-left: 37.5%;">
                                    <button class="btn-lg btn" id="prev" @onclick="PrevPage">
                                        <i class="fa-solid fa-chevron-left"></i>
                                    </button>


                                    @for (int i = Page.Value - 2; i <= Page + 2; i++)
                                    {
                                        int j = i;
                                        @if (i > 0 && i <= totalPageCount)
                                        {
                                            if (i == Page)
                                            {
                                                <span class="px-2" style="font-weight:bold;cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                                            }
                                            else
                                            {
                                                <span class="px-2" style="cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                                            }
                                        }
                                    }

                                    <button class="btn-lg btn" id="next" @onclick="NextPage">
                                        <i class="fa-solid fa-chevron-right"></i>
                                    </button>
                                </div>
                            }
                            else
                            {
                                <p>Nie znaleziono ofert spełniających zadane kryteria.</p>
                            }
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4" />
                    </div>
                </div>
            }
        <ShowPreferenceFormButton />
        </ContentTemplate>
    </SpinLoader>

@code {

    public string showExtraFilters = "none;";
    public string moreButtonText = "Więcej";
    public string moreButtonIcon = "add";

    public void ShowMore()
    {
        if (showExtraFilters == "block;")
        {
            showExtraFilters = "none;";
            moreButtonText = "Więcej";
            moreButtonIcon = "add";
        }
        else
        {
            showExtraFilters = "block;";
            moreButtonText = "Mniej";
            moreButtonIcon = "remove";
        }
    }

    public bool isLoading = true;
    #region Params
    public int? Page { get; set; } = 1;
    private EditContext editContext;
    [Parameter]
    [SupplyParameterFromQuery]
    public string? City { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    [Range(1, Int32.MaxValue, ErrorMessage = "Wartość nie może być ujemna")]
    public int? MinPrice { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    [Range(1, Int32.MaxValue, ErrorMessage = "Wartość nie może być ujemna")]
    public int? MaxPrice { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? HowRecent { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    [Range(1, Int32.MaxValue, ErrorMessage = "Wartość nie może być ujemna")]
    public int? OfferId { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? DescriptionFragment { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public bool? RemoteControl { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string[]? availablePlotTypes { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? availableOfferTypes { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    [Range(1, Int32.MaxValue, ErrorMessage = "Wartość nie może być ujemna")]
    public int? minArea { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    [Range(1, Int32.MaxValue, ErrorMessage = "Wartość nie może być ujemna")]
    public int? maxArea { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    [Range(1, Int32.MaxValue, ErrorMessage = "Wartość nie może być ujemna")]
    public int? minPricePerMeterSquared { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    [Range(1, Int32.MaxValue, ErrorMessage = "Wartość nie może być ujemna")]
    public int? maxPricePerMeterSquared { get; set; }


    // ========== okolica ==========
    [Parameter]
    [SupplyParameterFromQuery]
    public bool? NearForest { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public bool? NearLake { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public bool? NearMountains { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public bool? NearSea { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public bool? NearOpenArea { get; set; }

    #endregion


    private int pageSize = 10;
    private int totalPageCount;
    public HowRecent[] howRecentList = Enum.GetValues(typeof(HowRecent)).Cast<HowRecent>().ToArray();
    public HowRecent? HowRecentEnum;

    public AvailableOfferTypes[] AvailableOfferTypesList = Enum.GetValues(typeof(AvailableOfferTypes)).Cast<AvailableOfferTypes>().ToArray();
    public AvailableOfferTypes? AvailableOfferTypesEnum;

    public List<PlotType> allPlotTypes = Enum.GetValues(typeof(PlotType)).Cast<PlotType>().ToList<PlotType>();
    public List<PlotType> acceptablePlotTypeList = new();

    public OfferListing? offers { get; set; }
    public PlotOfferFilteringViewModel model { get; set; } = new();
    public bool actuallyFirstRender = true;
    protected async Task ShowPage()
    {
        if(Page == null)
        {
            Page = 1;
        }
        Paging paging = new()
            {
                PageSize = pageSize,
                PageNumber = Page != null ? Page.Value : 1
            };
        if (actuallyFirstRender)
        {
            await scroll.ScrollToElementByIdAsync("offers");
            await JsRuntime.InvokeVoidAsync("scroll_past_filters");
            actuallyFirstRender = false;
        }
        Inżynierka_Common.Listing.SortOrder sortOrder = new();
        sortOrder.Sort = new();
        KeyValuePair<string, string> sort = new("AddedDate", "DESC"); //na razie na sztywno po dacie
        sortOrder.Sort.Add(sort);
        HowRecent HowRecentEnum;
        PlotType PlotTypeEnum;
        if (HowRecent == null || HowRecent == "")
        {
            HowRecentEnum = Inżynierka_Common.Enums.HowRecent.ALL;
        }
        else
        {
            HowRecentEnum = (HowRecent)Enum.Parse(typeof(HowRecent), HowRecent);
        }

        if (availableOfferTypes == null || availableOfferTypes == "")
        {
            AvailableOfferTypesEnum = Inżynierka_Common.Enums.AvailableOfferTypes.SALE_AND_RENT;
        }
        else
        {
            AvailableOfferTypesEnum = (AvailableOfferTypes)Enum.Parse(typeof(AvailableOfferTypes), availableOfferTypes);
        }
        List<PlotType>? plotEnum = new();
        if(availablePlotTypes!=null)
        {
            foreach(var plotStr in availablePlotTypes)
            {
                plotEnum.Add((PlotType)Enum.Parse(typeof(PlotType), plotStr));
            }
        }
        else
        {
            plotEnum = null;
        }


        //create the model here
        model = new()
            {
                Paging = paging,
                SortOrder = sortOrder,
                HowRecent = HowRecent != null ? HowRecentEnum : Inżynierka_Common.Enums.HowRecent.ALL,
                availableOfferTypes = AvailableOfferTypesEnum,
                availablePlotTypes = plotEnum,
                City = City,
                MinPrice = MinPrice,
                MaxPrice = MaxPrice,
                OfferId = OfferId,
                DescriptionFragment = DescriptionFragment,
                RemoteControl = RemoteControl,
                minArea = minArea,
                maxArea = maxArea,
                minPricePerMeterSquared = minPricePerMeterSquared,
                maxPricePerMeterSquared = maxPricePerMeterSquared,
                NearForest = NearForest,
                NearLake = NearLake,
                NearMountains = NearMountains,
                NearSea = NearSea,
                NearOpenArea = NearOpenArea
            };

        string modelStr = JsonSerializer.Serialize(model);
        var content = new StringContent(modelStr, Encoding.UTF8, "application/json");
        var response = await _httpClient.PostAsync("OfferController/Search/Plot", content);
        offers = await response.Content.ReadFromJsonAsync<OfferListing>();
        totalPageCount = (offers.TotalCount + pageSize - 1) / pageSize;
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        if (availableOfferTypes == null || availableOfferTypes=="")
        {
            AvailableOfferTypesEnum = Inżynierka_Common.Enums.AvailableOfferTypes.SALE_AND_RENT;
        }
        else
        {
            AvailableOfferTypesEnum = (AvailableOfferTypes)Enum.Parse(typeof(AvailableOfferTypes), availableOfferTypes);
        }

        if (HowRecent == null || HowRecent == "")
        {
            HowRecentEnum = Inżynierka_Common.Enums.HowRecent.ALL;
        }
        else
        {
            HowRecentEnum = (HowRecent)Enum.Parse(typeof(HowRecent), HowRecent);
        }

        if (availablePlotTypes != null)
        {
            foreach (var plot in availablePlotTypes)
            {
                acceptablePlotTypeList.Add((PlotType)Enum.Parse(typeof(PlotType), plot));
            }

        }
        editContext = new(model);

        await ShowPage();
        isLoading = false;
        if (!_navigationManager.Uri.Contains("#offers"))
        {
            await JsRuntime.InvokeVoidAsync("scroll_to_top");
        }

    }

    protected async Task NextPage()
    {
        if(Page < totalPageCount)
        {
            Page++;
            await ShowPage();
        }
        
    }

    protected async Task ShowPage(int i)
    {
        Page = i;
        await ShowPage();
    }

    protected async Task PrevPage()
    {
        if (Page > 1)
        {
            Page--;
            await ShowPage();
        }
    }

    public async void Success()
    {
        Page = 1;
        await ShowPage();
    }

    public async void Search()
    {
        string uri = OfferSearchHelper.AddStandardQueryParams(_navigationManager.BaseUri, "Plot", "", City, MaxPrice, HowRecentEnum, MinPrice, OfferId, DescriptionFragment, RemoteControl);
        if (minArea != null && minArea.Value > 0)
        {
            uri = OfferSearchHelper.AddQueryParm(uri, "minArea", minArea.Value.ToString());
        }
        if (maxArea != null && maxArea.Value > 0)
        {
            uri = OfferSearchHelper.AddQueryParm(uri, "maxArea", maxArea.Value.ToString());
        }
        if (minPricePerMeterSquared != null && minPricePerMeterSquared.Value > 0)
        {
            uri = OfferSearchHelper.AddQueryParm(uri, "minPricePerMeterSquared", minPricePerMeterSquared.Value.ToString());
        }
        if (maxPricePerMeterSquared != null && maxPricePerMeterSquared.Value > 0)
        {
            uri = OfferSearchHelper.AddQueryParm(uri, "maxPricePerMeterSquared", maxPricePerMeterSquared.Value.ToString());
        }

        if (NearForest != null)
        {
            uri = OfferSearchHelper.AddQueryParm(uri, "NearForest", NearForest.Value.ToString());
        }
        if (NearLake != null)
        {
            uri = OfferSearchHelper.AddQueryParm(uri, "NearLake", NearLake.Value.ToString());
        }
        if (NearMountains != null)
        {
            uri = OfferSearchHelper.AddQueryParm(uri, "NearMountains", NearMountains.Value.ToString());
        }
        if (NearSea != null)
        {
            uri = OfferSearchHelper.AddQueryParm(uri, "NearSea", NearSea.Value.ToString());
        }
        if (NearOpenArea != null)
        {
            uri = OfferSearchHelper.AddQueryParm(uri, "NearOpenArea", NearOpenArea.Value.ToString());
        }

        if (AvailableOfferTypesEnum != null)
        {
            uri = OfferSearchHelper.AddQueryParm(uri, "availableOfferTypes", AvailableOfferTypesEnum.ToString());
        }
        if (acceptablePlotTypeList.Any())
        {
            var queryStr = string.Join("&", acceptablePlotTypeList.Select(x => "availablePlotTypes=" + x.ToString()));
            uri += $"&{queryStr}";
        }
        _navigationManager.NavigateTo(uri, true);
    }

}
