@using Blazored.LocalStorage
@using Inżynierka.Client.AuthProviders
@using Inżynierka.Client.Logics
@using System.Security.Claims
@inject ILocalStorageService _localStorageService;
@inject IApiLogic _apiLogic
@inject AuthenticationStateProvider _authStateProvider

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="@OnNavigateAsync">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Nie znaleziono</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <Inżynierka.Client.Components.NotFound Text="Pod podanym adresem nie znaleziono żadnej zawartości."/>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>
@code {
    private async Task OnNavigateAsync(NavigationContext args)
    {
        var auth = await _localStorageService.GetItemAsync<string>("isauthenticated");
        var user = (await (_authStateProvider as CustomAuthStateProvider)
        .GetAuthenticationStateAsync()).User;

        if (!string.IsNullOrEmpty(auth) && !user.Identity.IsAuthenticated)
        {
            var response = await _apiLogic.UserProfileAsync();
            if (response.Message == "Success")
            {
                (_authStateProvider as CustomAuthStateProvider)
                .SetAuthInfo(response.UserProfile);
            }
            else if (response.Message == "Unauthorized")
            {
                await _localStorageService.RemoveItemAsync("isauthenticated");
            }
        }
    }
}